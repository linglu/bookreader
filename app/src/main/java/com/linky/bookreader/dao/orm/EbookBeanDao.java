package com.linky.bookreader.dao.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.linky.bookreader.dao.orm.EbookBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ebook".
*/
public class EbookBeanDao extends AbstractDao<EbookBean, Long> {

    public static final String TABLENAME = "ebook";

    /**
     * Properties of entity EbookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property File = new Property(1, String.class, "file", false, "FILE");
        public final static Property LastPosition = new Property(2, Integer.class, "lastPosition", false, "LAST_POSITION");
        public final static Property BlockSize = new Property(3, Integer.class, "blockSize", false, "BLOCK_SIZE");
        public final static Property Reader = new Property(4, String.class, "reader", false, "READER");
        public final static Property Timestamp = new Property(5, java.util.Date.class, "timestamp", false, "TIMESTAMP");
    };

    private DaoSession daoSession;


    public EbookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public EbookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ebook\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE\" TEXT NOT NULL ," + // 1: file
                "\"LAST_POSITION\" INTEGER," + // 2: lastPosition
                "\"BLOCK_SIZE\" INTEGER," + // 3: blockSize
                "\"READER\" TEXT," + // 4: reader
                "\"TIMESTAMP\" INTEGER);"); // 5: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ebook\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EbookBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFile());
 
        Integer lastPosition = entity.getLastPosition();
        if (lastPosition != null) {
            stmt.bindLong(3, lastPosition);
        }
 
        Integer blockSize = entity.getBlockSize();
        if (blockSize != null) {
            stmt.bindLong(4, blockSize);
        }
 
        String reader = entity.getReader();
        if (reader != null) {
            stmt.bindString(5, reader);
        }
 
        java.util.Date timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(6, timestamp.getTime());
        }
    }

    @Override
    protected void attachEntity(EbookBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EbookBean readEntity(Cursor cursor, int offset) {
        EbookBean entity = new EbookBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // file
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // lastPosition
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // blockSize
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // reader
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EbookBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFile(cursor.getString(offset + 1));
        entity.setLastPosition(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBlockSize(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setReader(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimestamp(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EbookBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EbookBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
